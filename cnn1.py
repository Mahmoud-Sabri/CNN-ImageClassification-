# -*- coding: utf-8 -*-
"""CNN1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15wiXuxfNlxUDITmUFjmw7gVZpgmGaeeH
"""

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import keras ,os,cv2

ImagesPath = '/content/Angry'
Images = os.listdir(ImagesPath)

len(Images)

Images[0]

Img = cv2.imread(os.path.join(ImagesPath , Images[0]))
Img

Img.shape

Img[0]

Img[0][0]

Img.shape

img = cv2.cvtColor(Img , cv2.COLOR_BGR2GRAY)

img.shape

img[0]

plt.imshow(img , cmap = 'gray')
plt.show()

for i in range(5):
  img = cv2.imread(os.path.join(ImagesPath , np.random.choice(Images)))
  plt.imshow(img)
  plt.show()

for i in range(5):
  img = cv2.imread(os.path.join(ImagesPath , np.random.choice(Images)))
  img = cv2.cvtColor(img , cv2.COLOR_BGR2GRAY)
  plt.imshow(img , cmap = 'gray')
  plt.show()
  print(img.shape)

for img in os.listdir(ImagesPath) :
    img = cv2.imread(os.path.join(ImagesPath , img))

AllSize = []
for img in os.listdir(ImagesPath):
    img = cv2.imread(os.path.join(ImagesPath , img))
    if img is not None :
        AllSize.append(img.shape)
set(AllSize)

W , H = 100 , 100
for i in range(5):
    img = cv2.imread(os.path.join(ImagesPath ,np.random.choice(Images)))
    img = cv2.cvtColor(img , cv2.COLOR_BGR2GRAY)
    img = cv2.resize(img ,(H,W))
    plt.imshow(img , cmap = 'gray')
    plt.show()

img = img.reshape(100,120,1)
print(img.shape)

ImagesArray = []
W,H = 100 ,120
Image = []
for img in os.listdir(ImagesPath):
    img = cv2.imread(os.path.join(ImagesPath , img))
    if img is not None :
      Image.append(img)
for img in os.listdir(ImagesPath):
  img = cv2.imread(os.path.join(ImagesPath,img) ,cv2.IMREAD_GRAYSCALE)
  if img is not None:
    img = cv2.resize(img, (H,W))
    img = img.reshape(H,W,1)
    ImagesArray.append(img)
len(ImagesArray)

y = [np.random.choice([0,1]) for i in range(250)]
y

Image = []
for img in os.listdir(ImagesPath):
    img = cv2.imread(os.path.join(ImagesPath , img))
    if img is not None :
      Image.append(img)

len(Image)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(np.array(ImagesArray), np.array(y), test_size=0.25, random_state=44, shuffle =True)

print('X_train shape is ' , X_train.shape)
print('X_test shape is ' , X_test.shape)
print('y_train shape is ' , y_train.shape)
print('y_test shape is ' , y_test.shape)

KerasModel = keras.models.Sequential([
        keras.layers.Conv2D(filters = 32, kernel_size = (3,3),strides = (1,1), padding = 'VALID' ,input_shape = (H,W,1)),# SAME
        keras.layers.MaxPooling2D(pool_size = (2,2), strides = (2,2)),
        keras.layers.BatchNormalization(),
        keras.layers.Conv2D(filters = 32, kernel_size = (4,4),strides = (1,1), padding = 'VALID'  ),
        keras.layers.MaxPooling2D(pool_size = (2,2), strides = (2,2)),
        keras.layers.BatchNormalization(),
        keras.layers.Flatten(),
        keras.layers.Dense(128, activation = tf.nn.relu),
        keras.layers.Dropout(0.2),
        keras.layers.Dense(1, activation = tf.nn.sigmoid),
        ])

KerasModel.compile(optimizer ='adam',loss='binary_crossentropy',metrics=['accuracy'])

KerasModel.fit(X_train, y_train, epochs=5)

print(KerasModel.summary())



